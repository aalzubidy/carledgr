name: Deploy CarLedgr to VPS

on:
  push:
    branches: [master]
  workflow_dispatch:  # Allow manual triggering

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      website: ${{ steps.changes.outputs.website }}
      frontend: ${{ steps.changes.outputs.frontend }}
      backend: ${{ steps.changes.outputs.backend }}
      caddy: ${{ steps.changes.outputs.caddy }}
      deploy-scripts: ${{ steps.changes.outputs.deploy-scripts }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Detect changed files
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            website:
              - 'website/**'
            frontend:
              - 'frontend/**'
            backend:
              - 'backend/**'
            caddy:
              - 'Caddyfile'
            deploy-scripts:
              - 'server-deployment/**'

  deploy:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: ${{ needs.detect-changes.outputs.website == 'true' || needs.detect-changes.outputs.frontend == 'true' || needs.detect-changes.outputs.backend == 'true' || needs.detect-changes.outputs.caddy == 'true' || needs.detect-changes.outputs.deploy-scripts == 'true' }}
    
    steps:
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" | tr -d '\r' > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
          
      - name: Test SSH Connection
        run: |
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} 'echo "SSH connection test successful"'
          
      - name: Deploy to VPS
        run: |
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'ENDSSH'
            echo "🚀 Starting deployment..."
            echo "Changes detected:"
            echo "  Website: ${{ needs.detect-changes.outputs.website }}"
            echo "  Frontend: ${{ needs.detect-changes.outputs.frontend }}"
            echo "  Backend: ${{ needs.detect-changes.outputs.backend }}"
            echo "  Caddy: ${{ needs.detect-changes.outputs.caddy }}"
            echo "  Deploy Scripts: ${{ needs.detect-changes.outputs.deploy-scripts }}"
            
            cd /var/www/carledgr
            ./server-deployment/deploy-update.sh \
              --website=${{ needs.detect-changes.outputs.website }} \
              --frontend=${{ needs.detect-changes.outputs.frontend }} \
              --backend=${{ needs.detect-changes.outputs.backend }} \
              --caddy=${{ needs.detect-changes.outputs.caddy }} \
              --deploy-scripts=${{ needs.detect-changes.outputs.deploy-scripts }}
          ENDSSH

      - name: Health Check
        if: success()
        run: |
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'ENDSSH'
            cd /var/www/carledgr
            ./server-deployment/health-check.sh
          ENDSSH

      - name: Cleanup SSH Key
        if: always()
        run: |
          rm -f ~/.ssh/id_ed25519

      - name: Notify Success
        if: success()
        run: |
          echo "✅ Deployment completed successfully!"
          echo "🌐 Website: https://carledgr.com"
          echo "🚀 App: https://app.carledgr.com"
          echo "🧪 Demo: https://demo.carledgr.com"

      - name: Notify Failure
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          echo "Check the logs above for details." 