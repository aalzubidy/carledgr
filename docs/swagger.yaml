openapi: 3.0.0
info:
  title: CarLedgr API
  description: Car Finance Management System API
  version: 1.0.0
  contact:
    name: CarLedgr API Support
servers:
  - url: http://localhost:3000/api
    description: Development server
paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - organization
                - email
                - password
              properties:
                organization:
                  type: string
                  description: Organization name
                email:
                  type: string
                  format: email
                  description: User email
                password:
                  type: string
                  description: User password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    description: JWT token
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user (Admin/Org Admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - organization_id
                - email
                - password
                - first_name
                - last_name
              properties:
                organization_id:
                  type: string
                  format: uuid
                email:
                  type: string
                  format: email
                password:
                  type: string
                first_name:
                  type: string
                last_name:
                  type: string
                role:
                  type: string
                  enum: [user, org_admin, admin]
                  default: user
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /auth/organizations:
    get:
      tags:
        - Authentication
      summary: Get all organizations
      responses:
        '200':
          description: Organizations retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organization'

  /auth/me:
    get:
      tags:
        - Authentication
      summary: Get current user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /cars:
    get:
      tags:
        - Cars
      summary: Get all cars
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Cars retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Car'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Cars
      summary: Create new car
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CarInput'
      responses:
        '201':
          description: Car created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /cars/statistics:
    get:
      tags:
        - Cars
      summary: Get car statistics
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalCars:
                    type: integer
                  inStock:
                    type: integer
                  sold:
                    type: integer
                  pending:
                    type: integer

  /cars/search:
    get:
      tags:
        - Cars
      summary: Search cars
      security:
        - bearerAuth: []
      parameters:
        - name: q
          in: query
          description: Search query
          schema:
            type: string
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Car'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /cars/{id}:
    get:
      tags:
        - Cars
      summary: Get car by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Car retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Cars
      summary: Update car
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CarInput'
      responses:
        '200':
          description: Car updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Cars
      summary: Delete car
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Car deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /maintenance:
    get:
      tags:
        - Maintenance
      summary: Get all maintenance records
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Maintenance records retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MaintenanceRecord'

    post:
      tags:
        - Maintenance
      summary: Create maintenance record
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaintenanceInput'
      responses:
        '201':
          description: Maintenance record created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaintenanceRecord'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /maintenance/statistics:
    get:
      tags:
        - Maintenance
      summary: Get maintenance statistics
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Statistics retrieved successfully

  /maintenance/categories:
    get:
      tags:
        - Maintenance
      summary: Get maintenance categories
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MaintenanceCategory'

    post:
      tags:
        - Maintenance
      summary: Create maintenance category (Admin/Org Admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
      responses:
        '201':
          description: Category created successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /maintenance/categories/{id}:
    put:
      tags:
        - Maintenance
      summary: Update maintenance category (Admin/Org Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
      responses:
        '200':
          description: Category updated successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Maintenance
      summary: Delete maintenance category (Admin/Org Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Category deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /maintenance/car/{carId}:
    get:
      tags:
        - Maintenance
      summary: Get maintenance records for a car
      security:
        - bearerAuth: []
      parameters:
        - name: carId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Maintenance records retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MaintenanceRecord'

  /maintenance/{id}:
    get:
      tags:
        - Maintenance
      summary: Get maintenance record by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Maintenance record retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaintenanceRecord'

    put:
      tags:
        - Maintenance
      summary: Update maintenance record
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaintenanceInput'
      responses:
        '200':
          description: Maintenance record updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaintenanceRecord'

    delete:
      tags:
        - Maintenance
      summary: Delete maintenance record
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Maintenance record deleted successfully

  /dashboard/summary:
    get:
      tags:
        - Dashboard
      summary: Get dashboard summary
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Dashboard summary retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalCars:
                    type: integer
                  inStock:
                    type: integer
                  sold:
                    type: integer
                  pending:
                    type: integer
                  totalRevenue:
                    type: number
                  totalProfit:
                    type: number
                  totalMaintenanceCost:
                    type: number

  /dashboard/top-sold-models:
    get:
      tags:
        - Dashboard
      summary: Get top sold models
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Top sold models retrieved successfully

  /dashboard/top-maintenance:
    get:
      tags:
        - Dashboard
      summary: Get top maintenance categories
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Top maintenance categories retrieved successfully

  /dashboard/car-metrics:
    get:
      tags:
        - Dashboard
      summary: Get car metrics
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Car metrics retrieved successfully

  /reports/inventory:
    get:
      tags:
        - Reports
      summary: Get inventory report
      security:
        - bearerAuth: []
      parameters:
        - name: startDate
          in: query
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Inventory report retrieved successfully

  /reports/sales:
    get:
      tags:
        - Reports
      summary: Get sales report
      security:
        - bearerAuth: []
      parameters:
        - name: startDate
          in: query
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Sales report retrieved successfully

  /reports/maintenance:
    get:
      tags:
        - Reports
      summary: Get maintenance report
      security:
        - bearerAuth: []
      parameters:
        - name: startDate
          in: query
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Maintenance report retrieved successfully

  /reports/profit:
    get:
      tags:
        - Reports
      summary: Get profit report
      security:
        - bearerAuth: []
      parameters:
        - name: startDate
          in: query
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Profit report retrieved successfully

  /organizations:
    get:
      tags:
        - Organizations
      summary: Get all organizations (Admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Organizations retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organization'

    post:
      tags:
        - Organizations
      summary: Create organization (Admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationInput'
      responses:
        '201':
          description: Organization created successfully

  /organizations/{id}:
    get:
      tags:
        - Organizations
      summary: Get organization by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Organization retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'

    put:
      tags:
        - Organizations
      summary: Update organization
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationInput'
      responses:
        '200':
          description: Organization updated successfully

    delete:
      tags:
        - Organizations
      summary: Delete organization (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Organization deleted successfully

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        role:
          type: string
          enum: [user, org_admin, admin]
        organizationId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time

    Organization:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        address:
          type: string
        phone:
          type: string
        email:
          type: string
          format: email
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    OrganizationInput:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
        address:
          type: string
        phone:
          type: string
        email:
          type: string
          format: email

    Car:
      type: object
      properties:
        id:
          type: string
          format: uuid
        organizationId:
          type: string
          format: uuid
        vin:
          type: string
        make:
          type: string
        model:
          type: string
        year:
          type: integer
        color:
          type: string
        purchaseDate:
          type: string
          format: date
        purchasePrice:
          type: number
          format: decimal
        saleDate:
          type: string
          format: date
          nullable: true
        salePrice:
          type: number
          format: decimal
          nullable: true
        status:
          type: string
          enum: [in_stock, sold, pending, in_repair]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CarInput:
      type: object
      required:
        - vin
        - make
        - model
        - year
        - purchaseDate
        - purchasePrice
      properties:
        vin:
          type: string
        make:
          type: string
        model:
          type: string
        year:
          type: integer
        color:
          type: string
        purchaseDate:
          type: string
          format: date
        purchasePrice:
          type: number
          format: decimal
        saleDate:
          type: string
          format: date
          nullable: true
        salePrice:
          type: number
          format: decimal
          nullable: true
        status:
          type: string
          enum: [in_stock, sold, pending, in_repair]
          default: pending

    MaintenanceCategory:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    MaintenanceRecord:
      type: object
      properties:
        id:
          type: string
          format: uuid
        carId:
          type: string
          format: uuid
        categoryId:
          type: string
          format: uuid
        description:
          type: string
        cost:
          type: number
          format: decimal
        maintenanceDate:
          type: string
          format: date
        vendor:
          type: string
          nullable: true
        notes:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        category:
          $ref: '#/components/schemas/MaintenanceCategory'

    MaintenanceInput:
      type: object
      required:
        - car_id
        - category_id
        - description
        - cost
        - maintenance_date
      properties:
        car_id:
          type: string
          format: uuid
        category_id:
          type: string
          format: uuid
        description:
          type: string
        cost:
          type: number
          format: decimal
        maintenance_date:
          type: string
          format: date
        vendor:
          type: string
          nullable: true
        notes:
          type: string
          nullable: true

    Error:
      type: object
      properties:
        message:
          type: string
        details:
          type: string

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error' 